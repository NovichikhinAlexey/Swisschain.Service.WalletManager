syntax = "proto3";

option csharp_namespace = "Service.WalletManager.Protos";

package common;

service Wallets {
    rpc RegisterWallet (RegisterWalletRequest) returns(EmptyResponse);

    rpc DeleteWallet (DeleteWalletRequest) returns(EmptyResponse);
}

service Balances {
  rpc GetBalance (GetBalanceRequest) returns(BalanceResponse);

  rpc GetAllBalances (GetAllBalanceRequest) returns(BalanceResponses);
}

service Operations {
  rpc GetOperations (GetOperationRequest) returns(.common.GetOperationResponse);

  rpc GetOperationsForBlockchain (GetOperationsForBlockchainRequest) returns(.common.GetOperationResponse);
}

service Transfers {
  rpc BuildTransaction (BuildTransactionRequest) returns(BuiltTransactionResponse);

  rpc BroadcastTransaction (BroadcastTransactionRequest) returns(BroadcastTransactionResponse);
}

message BuildTransactionRequest {
  string operationId = 1;
  string blockchainId = 2;
  string blockchainAssetId = 3;
  string fromAddress = 4;
  string fromAddressContext = 5;
  string toAddress = 6;
  string amount = 7;
  bool includeFee = 8;
}

message BuiltTransactionResponse {
  string transactionContext = 1;
}

message BroadcastTransactionRequest{
  string operationId = 1;
  string blockchainId = 2;
  string signedTransaction = 3;
}

message BroadcastTransactionResponse {
  enum TransactionBroadcastResult {
    SUCCESS = 0;
    ALREADY_BROADCASTED = 1;
    AMOUNT_IS_TOO_SMALL = 2;
    NOT_ENOUGH_BALANCE = 3;
    BUILDING_SHOULD_BE_REPEATED = 4;
  }

  TransactionBroadcastResult transactionBroadcastResult = 1;
}

message RegisterWalletRequest {
    WalletKey walletKey = 1;
}

message DeleteWalletRequest {
    WalletKey walletKey = 1;
}

message GetBalanceRequest{
    WalletKey walletKey = 1;
} 

message GetAllBalanceRequest{
  int32 skip = 1;
  int32 take = 2;
} 

message BalanceResponse{
    .common.WalletKey walletKey = 1;
    string balance = 2;
    int64 block =3;
}

message BalanceResponses{
  repeated BalanceResponse balances = 1;
}


message GetOperationRequest {
    .common.WalletKey walletKey = 1;
    int32 skip = 2;
    int32 take = 3;
}

message GetOperationsForBlockchainRequest {
  string blockchainId = 1;
  int32 skip = 2;
  int32 take = 3;
}

message GetOperationResponse {
  repeated .common.OperationResponse operations = 1;
}

message OperationResponse {
    .common.WalletKey walletKey = 1;
    int64 operationId = 2;
    string balanceChange = 3;
    int64 block = 4;
}

message WalletKey {
  string blockchainId = 1;
  string blockchainAssetId = 2;
  string walletAddress = 3;
}

message EmptyResponse {

}

message ErrorResponse {
  int32 errorCode = 1;
  string errorMessage = 2;
}